name: CI/CD to AWS EKS on Tag Push

on:
   push:
     tags:
      - 'v*'
     paths:
        - .github/workflows/lks-technocicd.yml
        - deployment.yaml

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      #- name: Build, Tag, and Push Docker Image
      #  run: |
      #    IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${GITHUB_REF_NAME}"
      #    docker build -t $IMAGE .
      #    docker push $IMAGE

      - name: Build, Tag, and Push Docker image to ECR
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
           IMAGE_TAG: v.2.1.5
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  setup:
    name: Configure kubeconfig for EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}


      - name: Checking Node
        run: kubectl get node -A

      - name: Delete Old Secrett
        run: kubectl delete secret pod-secret

      - name: Create Secret
        run: |
            kubectl create secret generic pod-secret \
            --from-literal=API_GATEWAY_URL=${{ secrets.API_GATEWAY_URL }} \
            --from-literal=ATHENA_DB=${{ secrets.ATHENA_DB }} \
            --from-literal=ATHENA_SCHEMA_NAME=${{ secrets.ATHENA_SCHEMA_NAME }} \
            --from-literal=FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
            --from-literal=S3_STAGING_DIR=${{ secrets.S3_STAGING_DIR }} \
            --from-literal=SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }} \
            --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --from-literal=AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
            --from-literal=AWS_REGION=${{ secrets.AWS_REGION }}
    
      - name: Delete Old Deployment
        run:  |
          kubectl delete deployment techno-eks
          kubectl delete svc techno-app-service

      
      - name: Deploy new version to EKS
        run: |
          kubectl apply -f deployment.yaml

      - name: Check Exiting Pods
        run: kubectl get pods -o wide

